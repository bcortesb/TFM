# ================================================================
# BGScript: Heartrate script
# ----------------------------------------------------------------
# CHANGELOG:
#   
# ================================================================
dim result
dim input
dim adcvalue
dim hrvalue
dim sent
dim def
dim def_previous
dim hr_counter
dim connected

# Max (buffer size): 256 bytes
# Heart Rate variable (1st byte: Flag; 2nd byte: HB (uint8))
dim hr_data(2)

# Boundary conditions for heart beat counter (Limit voltage)
const def_lim	= 2		#V
const vdd 		= 3.3	#V

# Timer durations
const timer_0	= 1000	#ms
const timer_1	= 50	#ms

# LED pins:
# (output)LED Bluetooth:
const led_port_Bluetooth	= 1
const led_mask_Bluetooth	= $0004
const led_pin_nbr_Bluetooth	= 3
# (output)LED TX:
const led_port_TX		= 1
const led_mask_TX		= $0008
const led_pin_nbr_TX	= 4
# (output)LED Disconnect:
const led_port_Disc		= 1
const led_mask_Disc		= $0010
const led_pin_nbr_Disc	= 5

# (Input) Reset:
const reset_button_port		= 1
const reset_button_mask		= $0020
const reset_button_pin_nbr	= 6


# Boot event listener - Generated when the module is started
event system_boot(major, minor, patch, build, bootloader, hw)
	
	connected = 0
	
	# Variable initializer
	def_n = 0
	def_previous = 0
	hr_counter = 0
	
	# Write welcome message to UART interface at boot
    call endpoint_send(0,18,"HEART RATE START\r\n")

    # Configure LED pins as GPIO output
    call hardware_configure_gpio(led_port_Bluetooth, led_pin_nbr_Bluetooth, hardware_gpio_output,hardware_gpio_float)
	call hardware_configure_gpio(led_port_TX, led_pin_nbr_TX, hardware_gpio_output,hardware_gpio_float)
	call hardware_configure_gpio(led_port_Disc, led_pin_nbr_Disc, hardware_gpio_output,hardware_gpio_float)
	
	# Configure reset input
	call hardware_configure_gpio(reset_button_port, reset_button_pin_nbr, hardware_gpio_input,hardware_gpio_float)
	
	# Config LED pins
	# Disconnect LED on
	call hardware_write_gpio(led_port_Disc,led_mask_Disc,led_mask_Disc)
	# Bluetooth connection & TX off
	call hardware_write_gpio(led_port_TX,led_mask_TX,$0000)
	call hardware_write_gpio(led_port_Bluetooth,led_mask_Bluetooth,$0000)

    # By default stream data to DROP endpoint meaning the data will be ignored
    call endpoint_set_streaming_destination(3,31)
    call endpoint_set_streaming_destination(0,31)

end

# Generated when bluetooth radio is ready to use
event system_initialized(addr)	
  
    # Start Bluetooth LE advertisements and enable connections
    call le_gap_set_mode(2,2)
	
    # set timer, time interval between events is 1s [Send HeartRate Data]
    call hardware_set_soft_timer(timer_0,0,0)	# interval = 1 s, handle = 0, timer is repeating

    # start another timer, this fast timer is used to monitor & process HeartBeats.
    call hardware_set_soft_timer(timer_1,1,0)    # interval = 50 ms, handle = 1, timer is repeating
	# 2 ms -> 500Hz -> Frequency for ECG read

    # set connectable and discoverable mode
    call le_gap_set_mode(le_gap_general_discoverable, le_gap_undirected_connectable)
end

# Generated when timer has lapsed
event hardware_soft_timer(handle)
    
	# The 1s timer: extrapolate 1 min Heart Rate and send LE message
	if handle = 0 then
		# Heart Rate extrapolation
		hrvalue = hr_counter * 60 / (timer_0 / 1000)
		
		hr_counter = 0	# Counter reset
		
		# HR data Storage
		hr_data(0:1)=0	# flags. zero means heart rate is sent as 8-bit value and no extra info is sent
		hr_data(1:2)=hrvalue	# BPM value
		
		#$ff: To all connected devices; xgatt_hr: characteristic handle;
        call gatt_server_send_characteristic_notification($ff, xgatt_hr, 2, hr_data(0:2))(sent)
		if sent = 0 then
			#LED TX on
			call hardware_write_gpio(led_port_TX,led_mask_TX,led_mask_TX)
		else
			#LED TX off
			call hardware_write_gpio(led_port_TX,led_mask_TX,$0000)
		end if
			
    end if
	
	# The fast 50 ms timer: evaluates the ADC Strain Gage input and count nÂº HeartBeats	
    if handle = 1 then
		# System request ADC (12-bit) read operation
		call hardware_read_adc(7) (result,input,adcvalue)

		if result = 0 then #Result=0 successful
            # convert raw ADC reading to deformation (adc value range is 0..4095 -> hrvalue range is 40..220)
			# ADC * (V_ref / ADC_max) * V_coeff + offset
            def_n = adcvalue * (vdd / 4096)						
        else #error
            # if ADC read is unsuccessful, response value is 0
            def_n = 0
        end if

		# Heart Rate counter
		if def_n > def_lim & def_previous < def_lim then
			# Evaluates heart peaks
			hr_counter = hr_counter + 1
		end if
		
		# Store actual deformation to previous
		def_previous = def_n			
    end if
end

# Generated when new connection is opened
event le_connection_opened(address,address_type,master,connection,bonding)
	# Write a message to UART interface to indicate SPP connection
    call endpoint_send(0,21,"HeartRate CONNECTED\r\n")
		
    connected = 1
	if connected = 1 then
		#Bluetooth led on when connection is on
		call hardware_write_gpio(led_port_Bluetooth,led_mask_Bluetooth,led_mask_Bluetooth)
		call hardware_write_gpio(led_port_Disc,led_mask_Disc,$000)
	end if	
end

# Generated when the connection is closed
event le_connection_closed(reason,connection)

    call endpoint_send(0,24,"HeartRate DISCONNECTED\r\n")

    # connection closed, restart advertisement
    call le_gap_set_mode(le_gap_general_discoverable, le_gap_undirected_connectable) 

    connected = 0
	if connected = 0 then
		#Bluetooth led off when connection is off
		call hardware_write_gpio(led_port_Bluetooth,led_mask_Bluetooth,$0000)
		call hardware_write_gpio(led_port_Disc,led_mask_Disc,led_mask_Disc)
	end if	
end
